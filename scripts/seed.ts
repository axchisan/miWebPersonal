import { PrismaClient } from "@prisma/client"

const prisma = new PrismaClient()

const blogPosts = [
  {
    title: "Introducci√≥n a Next.js 14: App Router y Server Components",
    slug: "introduccion-nextjs-14-app-router",
    excerpt:
      "Descubre las nuevas caracter√≠sticas de Next.js 14 y c√≥mo el App Router revoluciona el desarrollo web moderno.",
    content: `
# Introducci√≥n a Next.js 14: App Router y Server Components

Next.js 14 ha llegado con mejoras significativas que transforman la manera en que desarrollamos aplicaciones web modernas. En este art√≠culo, exploraremos las caracter√≠sticas m√°s importantes de esta versi√≥n.

## App Router: El Futuro del Routing

El App Router introduce un nuevo paradigma de routing basado en el sistema de archivos, pero con capacidades mucho m√°s avanzadas:

- **Layouts anidados**: Permite crear layouts que se mantienen entre navegaciones
- **Loading states**: Estados de carga autom√°ticos para mejorar la UX
- **Error boundaries**: Manejo de errores m√°s granular

## Server Components: Rendizado en el Servidor

Los Server Components permiten renderizar componentes directamente en el servidor, ofreciendo:

- **Mejor rendimiento**: Menos JavaScript enviado al cliente
- **SEO mejorado**: Contenido renderizado en el servidor
- **Acceso directo a datos**: Sin necesidad de APIs intermedias

## Conclusi√≥n

Next.js 14 representa un salto significativo en el desarrollo web moderno, ofreciendo herramientas m√°s potentes y eficientes para crear aplicaciones escalables.
    `,
    coverImage: "/nextjs-app-router.jpg",
    tags: ["Next.js", "React", "Web Development", "JavaScript"],
    published: true,
    featured: true,
    readTime: 5,
  },
  {
    title: "Flutter vs React Native: ¬øCu√°l elegir en 2024?",
    slug: "flutter-vs-react-native-2024",
    excerpt:
      "Comparaci√≥n detallada entre Flutter y React Native para ayudarte a elegir la mejor opci√≥n para tu proyecto m√≥vil.",
    content: `
# Flutter vs React Native: ¬øCu√°l elegir en 2024?

La elecci√≥n entre Flutter y React Native sigue siendo una de las decisiones m√°s importantes al desarrollar aplicaciones m√≥viles. Analicemos ambas opciones.

## Flutter: La Propuesta de Google

Flutter ofrece:
- **Rendimiento nativo**: Compilaci√≥n directa a c√≥digo nativo
- **UI consistente**: Misma apariencia en todas las plataformas
- **Hot reload**: Desarrollo r√°pido e iterativo

## React Native: La Soluci√≥n de Meta

React Native destaca por:
- **Ecosistema maduro**: Gran cantidad de librer√≠as disponibles
- **Reutilizaci√≥n de c√≥digo web**: Aprovecha conocimientos de React
- **Comunidad activa**: Amplio soporte de la comunidad

## ¬øCu√°l elegir?

La decisi√≥n depende de varios factores:
- **Equipo**: ¬øConocen React o Dart?
- **Proyecto**: ¬øNecesitas UI personalizada o est√°ndar?
- **Tiempo**: ¬øQu√© tan r√°pido necesitas lanzar?

## Conclusi√≥n

Ambas son excelentes opciones. Flutter para proyectos que requieren UI altamente personalizada, React Native para equipos con experiencia en React.
    `,
    coverImage: "/flutter-vs-react-native.jpg",
    tags: ["Flutter", "React Native", "Mobile Development", "Comparison"],
    published: true,
    featured: true,
    readTime: 8,
  },
  {
    title: "Automatizaci√≥n de Procesos con n8n: Gu√≠a Completa",
    slug: "automatizacion-procesos-n8n-guia",
    excerpt:
      "Aprende a automatizar tus procesos empresariales utilizando n8n, la herramienta de automatizaci√≥n de c√≥digo abierto.",
    content: `
# Automatizaci√≥n de Procesos con n8n: Gu√≠a Completa

n8n es una herramienta de automatizaci√≥n de flujos de trabajo que permite conectar diferentes servicios y automatizar tareas repetitivas.

## ¬øQu√© es n8n?

n8n es una plataforma de automatizaci√≥n que permite:
- **Conectar servicios**: Integra m√°s de 200 aplicaciones
- **Flujos visuales**: Interfaz drag-and-drop intuitiva
- **C√≥digo abierto**: Totalmente gratuito y personalizable

## Casos de Uso Comunes

### 1. Automatizaci√≥n de Marketing
- Sincronizar leads entre CRM y email marketing
- Generar reportes autom√°ticos
- Notificaciones de nuevos clientes

### 2. Gesti√≥n de Datos
- Backup autom√°tico de bases de datos
- Sincronizaci√≥n entre sistemas
- Procesamiento de archivos

### 3. Comunicaci√≥n
- Notificaciones autom√°ticas en Slack
- Env√≠o de emails personalizados
- Integraci√≥n con sistemas de tickets

## Primeros Pasos

1. **Instalaci√≥n**: Docker, npm o cloud
2. **Configuraci√≥n**: Setup inicial y credenciales
3. **Primer flujo**: Crear un workflow simple
4. **Testing**: Probar y depurar

## Conclusi√≥n

n8n democratiza la automatizaci√≥n, permitiendo a cualquier persona crear flujos de trabajo complejos sin necesidad de programar.
    `,
    coverImage: "/n8n-automation-workflow.jpg",
    tags: ["Automation", "n8n", "Workflow", "Business Process"],
    published: true,
    featured: false,
    readTime: 12,
  },
  {
    title: "TypeScript: Mejores Pr√°cticas para Desarrolladores",
    slug: "typescript-mejores-practicas",
    excerpt: "Consejos y mejores pr√°cticas para escribir c√≥digo TypeScript limpio, mantenible y escalable.",
    content: `
# TypeScript: Mejores Pr√°cticas para Desarrolladores

TypeScript ha revolucionado el desarrollo JavaScript. Aqu√≠ te comparto las mejores pr√°cticas que he aprendido en mis proyectos.

## Configuraci√≥n Estricta

Siempre usa configuraci√≥n estricta en tu \`tsconfig.json\`:

\`\`\`json
{
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true
  }
}
\`\`\`

## Tipos vs Interfaces

### Cu√°ndo usar Types
- Para uniones y primitivos
- Para computed types
- Para aliases simples

### Cu√°ndo usar Interfaces
- Para objetos y clases
- Cuando necesites extensi√≥n
- Para definir contratos

## Utility Types

Aprovecha los utility types de TypeScript:
- \`Partial<T>\`: Hace todas las propiedades opcionales
- \`Required<T>\`: Hace todas las propiedades requeridas
- \`Pick<T, K>\`: Selecciona propiedades espec√≠ficas
- \`Omit<T, K>\`: Excluye propiedades espec√≠ficas

## Conclusi√≥n

TypeScript no es solo JavaScript con tipos, es una herramienta que mejora la calidad y mantenibilidad del c√≥digo.
    `,
    coverImage: "/typescript-best-practices.jpg",
    tags: ["TypeScript", "JavaScript", "Programming", "Best Practices"],
    published: true,
    featured: false,
    readTime: 6,
  },
]

async function seedBlogPosts() {
  console.log("üå± Seeding blog posts...")

  try {
    // Clear existing blog posts
    await prisma.blogPost.deleteMany()
    console.log("üóëÔ∏è  Cleared existing blog posts")

    // Create new blog posts
    for (const post of blogPosts) {
      await prisma.blogPost.create({
        data: {
          ...post,
          publishedAt: post.published ? new Date() : null,
        },
      })
      console.log(`‚úÖ Created blog post: ${post.title}`)
    }

    console.log("üéâ Blog posts seeded successfully!")
  } catch (error) {
    console.error("‚ùå Error seeding blog posts:", error)
  } finally {
    await prisma.$disconnect()
  }
}

seedBlogPosts()
