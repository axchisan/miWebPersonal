// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  role      Role     @default(VISITOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  comments Comment[]
  likes    Like[]
  messages ContactMessage[]
  favorites Favorite[]

  @@map("users")
}

model Profile {
  id          String @id @default(cuid())
  name        String
  title       String
  bio         String @db.Text
  email       String
  phone       String?
  whatsapp    String?
  instagram   String?
  github      String?
  linkedin    String?
  avatar      String?
  resumeUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("profiles")
}

model Skill {
  id          String @id @default(cuid())
  name        String @unique
  category    String
  level       Int    @default(5) // 1-10 scale
  icon        String?
  color       String?
  order       Int    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("skills")
}

model Service {
  id          String @id @default(cuid())
  title       String @unique
  description String @db.Text
  icon        String?
  features    String[] // Array of features
  price       String?
  order       Int    @default(0)
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("services")
}

model Project {
  id          String @id @default(cuid())
  title       String @unique
  description String @db.Text
  shortDesc   String?
  content     String? @db.Text
  coverImage  String? // Single cover image URL
  images      String[] // Array of additional image URLs
  videos      String[] // Array of video URLs
  files       ProjectFile[] // Relación con archivos del proyecto
  technologies String[] // Array of tech stack
  githubUrl   String?
  liveUrl     String?
  downloadUrl String?
  category    String?
  status      ProjectStatus @default(COMPLETED)
  featured    Boolean @default(false)
  order       Int    @default(0)
  views       Int    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  comments Comment[]
  likes    Like[]
  favorites Favorite[]
  projectViews ProjectView[]

  @@map("projects")
}

model BlogPost {
  id          String @id @default(cuid())
  title       String
  slug        String @unique
  excerpt     String?
  content     String @db.Text
  coverImage  String?
  files       BlogFile[]
  tags        String[] // Array of tags
  published   Boolean @default(false)
  featured    Boolean @default(false)
  views       Int    @default(0)
  readTime    Int?   // in minutes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?

  // Relations
  comments Comment[]
  likes    Like[]
  favorites Favorite[]
  blogViews BlogView[]

  @@map("blog_posts")
}

model Comment {
  id        String @id @default(cuid())
  content   String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  // Polymorphic relations
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
  
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  blogPostId String?

  @@map("comments")
}

model Like {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  // Polymorphic relations
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
  
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  blogPostId String?

  @@unique([userId, projectId])
  @@unique([userId, blogPostId])
  @@map("likes")
}

model ContactMessage {
  id        String @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String @db.Text
  read      Boolean @default(false)
  replied   Boolean @default(false)
  status    MessageStatus @default(PENDING)
  response  String? @db.Text
  respondedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?

  @@map("contact_messages")
}

model SiteSettings {
  id          String @id @default(cuid())
  key         String @unique
  value       String @db.Text
  type        SettingType @default(TEXT)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}

// Enums
enum Role {
  ADMIN
  VISITOR
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

enum SettingType {
  TEXT
  NUMBER
  BOOLEAN
  JSON
  IMAGE
}

enum FileCategory {
  IMAGE
  VIDEO
  DOCUMENT
  EXECUTABLE // .exe, .msi, .dmg
  MOBILE_APP // .apk, .ipa
  ARCHIVE // .zip, .rar, .7z
  SOURCE_CODE // .zip con código fuente
  OTHER
}

enum MessageStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

model ProjectFile {
  id          String @id @default(cuid())
  filename    String // Nombre del archivo en el servidor
  originalName String // Nombre original del archivo
  displayName String? // Nombre personalizado para mostrar
  description String? // Descripción del archivo
  url         String // URL pública del archivo
  size        Int // Tamaño en bytes
  type        String // MIME type
  category    FileCategory @default(OTHER) // Categoría del archivo
  platform    String? // Plataforma (Android, iOS, Windows, macOS, Linux, Web)
  version     String? // Versión del archivo/app
  isDownloadable Boolean @default(true) // Si el archivo es descargable
  downloadCount Int @default(0) // Contador de descargas
  order       Int @default(0) // Orden de visualización
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String

  @@map("project_files")
}

model BlogFile {
  id          String @id @default(cuid())
  filename    String // Nombre del archivo en el servidor
  originalName String // Nombre original del archivo
  displayName String? // Nombre personalizado para mostrar
  description String? // Descripción del archivo
  url         String // URL pública del archivo
  size        Int // Tamaño en bytes
  type        String // MIME type
  category    FileCategory @default(OTHER) // Categoría del archivo
  isDownloadable Boolean @default(true) // Si el archivo es descargable
  downloadCount Int @default(0) // Contador de descargas
  order       Int @default(0) // Orden de visualización
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  blogPost    BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  blogPostId  String

  @@map("blog_files")
}

model SiteAnalytics {
  id        String @id @default(cuid())
  path      String // Ruta visitada
  userAgent String? // User agent del visitante
  ip        String? // IP del visitante (hasheada por privacidad)
  referer   String? // Página de referencia
  country   String? // País del visitante
  device    String? // Tipo de dispositivo
  createdAt DateTime @default(now())

  @@map("site_analytics")
}

model ProjectView {
  id        String @id @default(cuid())
  projectId String
  userAgent String?
  ip        String? // IP hasheada
  createdAt DateTime @default(now())

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_views")
}

model BlogView {
  id         String @id @default(cuid())
  blogPostId String
  userAgent  String?
  ip         String? // IP hasheada
  createdAt  DateTime @default(now())

  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)

  @@map("blog_views")
}

model Favorite {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  
  // Polymorphic relations
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
  
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  blogPostId String?

  @@unique([userId, projectId])
  @@unique([userId, blogPostId])
  @@map("favorites")
}
